import random

class Card:
    def __init__(self, rank, suit):
        self.rank = rank
        self.suit = suit
    
    def value(self):
        if self.rank in ['K', 'Q', 'J']:
            return 10
        elif self.rank == 'A':
            return 11
        else:
            return int(self.rank)

class Player:
    def __init__(self, name, balance):
        self.name = name
        self.hand = []
        self.score = 0
        self.balance = balance
    
    def add_card(self, card):
        self.hand.append(card)
    
    def clear_hand(self):
        self.hand = []
    
    def calculate_hand_value(self):
        total_value = sum(card.value() for card in self.hand)
        num_aces = sum(1 for card in self.hand if card.rank == 'A')
        
        while total_value > 21 and num_aces:
            total_value -= 10
            num_aces -= 1
        
        return total_value

# Main function for Pontoon game
def pontoon():
    suits = ['Hearts', 'Diamonds', 'Clubs', 'Spades']
    ranks = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']
    deck = [Card(rank, suit) for rank in ranks for suit in suits] * 4
    
    players = [Player(input(f"Enter name for player {i + 1}: "), float(input(f"Enter initial balance for player {i + 1}: $"))) for i in range(int(input("Enter the number of players: ")))]
    
    while True:
        # Reset hands and bets for each round
        for player in players:
            player.clear_hand()
            bet = float(input(f"{player.name}, your current balance is ${player.balance}. Enter your bet: $"))
            while bet <= 0 or bet > player.balance:
                bet = float(input("Invalid bet. Please enter a valid bet: $"))
            player.bet = bet
        
        # Shuffle and deal initial cards to players
        random.shuffle(deck)
        for player in players:
            player.add_card(deck.pop())
            player.add_card(deck.pop())
        
        # Player's turn
        for player in players:
            while True:
                print(f"\n{player.name}'s turn:")
                print("Your hand: " + ', '.join(f"{card.rank} of {card.suit}" for card in player.hand))
                print("Hand value: " + str(player.calculate_hand_value()))
                
                if player.calculate_hand_value() == 21:
                    print("Blackjack! You win!")
                    player.balance += player.bet * 1.5
                    break
                
                if player.calculate_hand_value() > 21:
                    print("Busted! Your hand value is over 21.")
                    break
                
                if len(player.hand) == 2 and player.hand[0].rank == player.hand[1].rank:
                    choice = input("Choose your action (h: Hit, s: Stand, d: Double Down, su: Surrender, sp: Split): ").lower()
                else:
                    choice = input("Choose your action (h: Hit, s: Stand, d: Double Down, su: Surrender): ").lower()
                
                if choice == 'h':
                    player.add_card(deck.pop())
                elif choice == 'd':
                    if len(player.hand) == 2:
                        player.bet *= 2
                        player.add_card(deck.pop())
                        break
                    else:
                        print("Invalid option for doubling down.")
                elif choice == 's':
                    break
                elif choice == 'su':
                    print(f"{player.name} surrendered. Half of your bet will be returned.")
                    player.balance -= player.bet / 2
                    break
                elif choice == 'sp':
                    if len(player.hand) == 2 and player.hand[0].rank == player.hand[1].rank:
                        new_hand = Card(player.hand.pop().rank, player.hand[0].suit)
                        player.add_card(new_hand)
                        new_hand = Card(deck.pop().rank, deck.pop().suit)
                        player.add_card(new_hand)
                        print(f"Your hands after split: {player.hand[0].rank} of {player.hand[0].suit}, {player.hand[1].rank} of {player.hand[1].suit}")
                    else:
                        print("Invalid option for splitting.")
                else:
                    print("Invalid choice. Please enter a valid option.")
        
        # Dealer's turn
        dealer = Player("Dealer", 0)
        dealer.add_card(deck.pop())
        dealer.add_card(deck.pop())
        
        print("\nDealer's turn:")
        print("Dealer's hand: " + ', '.join(f"{card.rank} of {card.suit}" for card in dealer.hand))
        
        while dealer.calculate_hand_value() < 16:
            dealer.add_card(deck.pop())
        
        # Determine the winner and update player balances
        for player in players:
            print(f"\n{player.name}'s hand value: " + str(player.calculate_hand_value()))
            if player.calculate_hand_value() > 21:
                print(f"{player.name} busts! Dealer wins!")
                player.balance -= player.bet
            elif dealer.calculate_hand_value() > 21 or player.calculate_hand_value() > dealer.calculate_hand_value():
                print(f"{player.name} wins!")
                player.balance += player.bet
            elif player.calculate_hand_value() == dealer.calculate_hand_value():
                print(f"{player.name} ties with the dealer!")
            else:
                print(f"{player.name} loses!")
        
        # Display updated balances
        print("\nUpdated Balances:")
        for player in players:
            print(f"{player.name}: ${player.balance:.2f}")
        
        play_again = input("Do you want to play again? (yes/no): ").lower()
        if play_again != 'yes':
            print("Thanks for playing! Goodbye!")
            break

# Run the game
pontoon()
